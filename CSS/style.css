/* Flex Box CSS */

#flexContainer {
  gap: 50px;
  height: 500px;
  width: 500px;
  border: 2px solid black;
  display: flex;
  /* flex-direction: row; */
  /* flex-wrap: wrap; */
  /* shorthand for flex-direction & flex-wrap : flex-flow */
  flex-flow: row wrap;
  justify-content: center; /* for horizontal movement */
  /* align-items: baseline; */
  align-content: space-around; /* for vertical movement */
}

/* Property	Description
align-content	Modifies the behavior of the flex-wrap property. It is similar to align-items, but instead of aligning flex items, it aligns flex lines
align-items	Vertically aligns the flex items when the items do not use all available space on the cross-axis
display	Specifies the display behavior (the type of rendering box) for an element
flex-direction	Specifies the direction of the flex items inside a flex container
flex-flow	A shorthand property for flex-direction and flex-wrap
flex-wrap	Specifies whether the flex items should wrap or not, if there is not enough room for them on one flex line
justify-content	Horizontally aligns the flex items when the items do not use all available space on the main axis */

.items {
  background: #4dabf7;
  padding: 25px;
  color: white;
  font-size: 1.5rem;
  font-weight: bold;
  /* height: 50px;
    width: 50px; */
  border: 2px solid black;
  font-size: larger;
}

/* Grid CSS */

.grid-container1 {
  display: grid;
  grid-template-columns: repeat(2, minmax(100px, 1fr));
  grid-template-rows: repeat(3, 1fr);
  gap: 100px;
  width: 80%;
  background: #e9ecef;
  padding: 50px;
  border: 2px dashed #333;
}

.grid-item {
  /* grid-column: 1 / 3; */
  /* grid-row: 1 / 3; */
  /* grid-column: 3 / span 2; */
  grid-row: span 2;
  background: #4dabf7;
  color: white;
  font-size: 1.5rem;
  font-weight: bold;
  display: flex;
  justify-content: center;
  align-items: stretch;
  border-radius: 8px;
}

.itemFirst {
  grid-area: 1 / 1 / 3 / 2;
}

/* GRID AREA */
.item1 {
  grid-area: myArea;
}

.item2 {
  grid-area: Area2;
}

.grid-container2 {
  display: grid;
  grid-template-areas: 'myArea myArea Area2 Area2 . .';
  grid-gap: 10px;
  background-color: #2196F3;
  padding: 10px;
}

.grid-container2> div {
  background-color: rgba(255, 255, 255, 0.8);
  text-align: center;
  padding: 20px 0;
  font-size: 30px;
}
